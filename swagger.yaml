openapi: 3.0.0
info:
  description: "Свагер сервиса по отображению результатов бегунов"
  version: "1.0.0"
  title: "Swagger Run"
servers:
  - url: http://localhost:5000
tags:
- name: "user"
  description: "Управление пользователями"
- name: "statistic"
  description: "Статистика"
- name: "stage"
  description: "Этапы Соревнований"
- name: "competition"
  description: "Соревнования"
- name: "distance"
  description: "Дистанция"
- name: "race"
  description: "Протокол соревнования"
paths:
  /user:
    get:
      tags:
      - "user"
      summary: "Получение всех юзеров"
      operationId: "getUsers"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Получение юзера по id"
      operationId: "getUserById"
      parameters:
        - $ref: '#/components/parameters/getId'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /statistic/user/{id}:
    get:
      tags:
      - "statistic"
      summary: "Получение статистики по пользователю"
      operationId: "getUserStatistic"
      parameters:
        - $ref: '#/components/parameters/getId'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserStatistic'
  /statistic/competition/{id}:
    get:
      tags:
      - "statistic"
      summary: "Получение статистики по соревнованию"
      operationId: "getCompetitionStatistic"
      parameters:
        - $ref: '#/components/parameters/getId'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionStatistic'
  /stage:
    get:
      tags:
      - "stage"
      summary: "Получение всех этапов"
      operationId: "getStages"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stage'
  /stage/{id}:
    get:
      tags:
      - "stage"
      summary: "Получение этапа по ID"
      operationId: "getStageById"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
  /stage/create:
    post:
      tags:
      - "stage"
      summary: "Создание этапа"
      operationId: "createStage"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStage'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
  /competition/create:
    post:
      tags:
      - "competition"
      summary: "Создание соревнования"
      operationId: "createCompetition"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competition'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCompetition'
  /competition:
    get:
      tags:
      - "competition"
      summary: "Получение соревнований"
      operationId: "getCompetitions"
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetCompetition'
  /distance/create:
    post:
      tags:
      - "distance"
      summary: "Создание дистанции"
      operationId: "createDistance"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Distance'
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCreatedDistance'
  /distance:
    get:
      tags:
      - "distance"
      summary: "Получение дистанций"
      operationId: "getDistance"
      parameters:
        - in: query
          name: stageId
          description: ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetDistance'
  /race/create-from-file:
    post:
      tags:
      - "race"
      summary: "Создание пользователей с дистанцией из файла соревнования"
      operationId: "createRace"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  format: binary
                stageId: 
                  type: integer
                  format: int64
                  example: 1
                date: 
                  type: string
                  example: "1999-10-16T00:00:00.000Z"
                distance: 
                  type: integer
                  format: int64
                  example: 1
              required:
                - filename
                - date
                - distance
      responses:
        "200":
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCreatedDistance'
                  
components:
  parameters:
    getId:
      in: path
      name: id
      description: ID
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    Gender:
      type: string
      enum:
        - male
        - female
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: '1'
        name:
          type: string
          example: 'Anton'
        surname:
          type: string
          example: 'Rulin'
        birthday:
          type: string
          example: "1999-10-16T00:00:00.000Z"
        gender:
          $ref: '#/components/schemas/Gender'
      required:
        - id
        - name
        - surname
        - birthday
        - gender
    UserStatistic:
      type: object
      properties:
        stageId:
          type: integer
          format: int64
          example: 1
        stageName:
          type: string
          example: 'Rulin'
        distanceTime:
          type: integer
          format: int64
          description: "Время в секундах"
          example: 264010
        distanceTemp:
          type: integer
          format: int64
          description: "Темп в секундах на километр"
          example: 176
      required:
        - stageId
        - stageName
        - distanceTime
        - distanceTemp
    CompetitionStatistic:
      type: object
      properties:
        stageCount:
          type: integer
          format: int64
          example: 1
        userCount:
          type: integer
          format: int64
          example: 1
        sex: 
          type: object
          properties:
            male:
              type: object
              properties:
                genderCount:
                  type: integer
                  format: int64
                  example: 1
                gender:
                  $ref: '#/components/schemas/Gender'
            female:
              type: object
              properties:
                genderCount:
                  type: integer
                  format: int64
                  example: 1
                gender:
                  $ref: '#/components/schemas/Gender'
        ageCampare:
          type: object
          properties:
            oldest:
              type: string
              example: "1960-01-10"
            youngest:
              type: string
              example: "1960-01-10"
        tempCampare:
          type: object
          description: "Темп в секундах на километр"
          properties:
            fast: 
              type: integer
              format: int64
              description: "Темп в секундах на километр"
              example: 172
            slow: 
              type: integer
              format: int64
              description: "Темп в секундах на километр"
              example: 258016
        timeCampare:
          type: object
          description: "Время в секундах"
          properties:
            fast: 
              type: integer
              format: int64
              description: "Время в секундах"
              example: 258016
            slow: 
              type: integer
              format: int64
              description: "Время в секундах"
              example: 660055
        distanceRun:
          type: integer
          format: int64
          description: "Кол-во пробеженных метров"
          example: 510000
        fastest:
          type: object
          description: "Время в секундах"
          properties:
            time: 
              type: integer
              format: int64
              description: "Время в секундах"
              example: 258016
            temp: 
              type: integer
              format: int64
              description: "Темп в секундах на километр"
              example: 172
            name:
              type: string
              example: 'Anton'
            surname:
              type: string
              example: 'Rulin'
      required:
        - stageCount
        - userCount
        - sex
        - ageCampare
        - tempCampare
        - timeCampare
        - distanceRun
        - fastest
    Stage:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 'Этап 2'
        date:
          type: string
          example: "1999-10-16T00:00:00.000Z"
        competitionId:
          type: integer
          format: int64
          example: 1
      required:
        - id
        - name
        - date
        - competitionId
    CreateStage:
      type: object
      properties:
        name:
          type: string
          example: 'Этап 2'
        date:
          type: string
          example: "1999-10-16T00:00:00.000Z"
        competitionId:
          type: integer
          format: int64
          example: 1
      required:
        - name
        - date
        - competitionId
    Competition:
      type: object
      properties:
        name:
          type: string
          example: 'Кубок 2'
        startDate:
          type: string
          example: "1999-10-16T00:00:00.000Z"
        endDate:
          type: string
          example: "1999-10-16T00:00:00.000Z"
      required:
        - name
        - startDate
    GetCompetition:
      allOf:     
        - $ref: '#/components/schemas/Competition'
      type: object
      properties:
        id:
            type: integer
            format: int64
            example: 1
      required:
        - name
        - startDate
        - id
    Distance:
      type: object
      properties:
        time:
          type: integer
          format: int64
          example: 1
        date:
          type: string
          example: "1999-10-16T00:00:00.000Z"
        distance:
          type: integer
          format: int64
          example: 1
        temp:
          type: integer
          format: int64
          example: 1
        stageId:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
      required:
        - time
        - date
        - distance
        - temp
        - userId
    GetCreatedDistance:
      allOf:     
        - $ref: '#/components/schemas/Distance'
      type: object
      properties:
        id:
            type: integer
            format: int64
            example: 1
      required:
        - time
        - date
        - distance
        - temp
        - userId
        - id
    GetDistance:
      type: object
      properties:
        time:
          type: integer
          format: int64
          example: 1
        date:
          type: string
          example: "1999-10-16T00:00:00.000Z"
        distance:
          type: integer
          format: int64
          example: 1
        temp:
          type: integer
          format: int64
          example: 1
        stageId:
          type: integer
          format: int64
          example: 1
        user:
          $ref: '#/components/schemas/User'
      required:
        - time
        - date
        - distance
        - temp
        - user
